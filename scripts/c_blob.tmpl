/* Flash OS Routines (Automagically Generated)
 * Copyright (c) 2009-2015 ARM Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

static const uint32_t {{name}}_flash_prog_blob[] = {
    {{prog_header}}
    {{algo.format_algo_data(4, 8, "c")}}
};

// Start address of flash
static const uint32_t flash_start = {{"0x%08x" % algo.flash_start}};
// Size of flash
static const uint32_t flash_size = {{"0x%08x" % algo.flash_size}};

/**
* List of start and size for each size of flash sector - even indexes are start, odd are size
* The size will apply to all sectors between the listed address and the next address
* in the list.
* The last pair in the list will have sectors starting at that address and ending
* at address flash_start + flash_size.
*/
static const uint32_t sectors_info[] = {
{%- for start, size  in algo.sector_sizes %}
    {{ "0x%08x, 0x%08x" % (start + algo.flash_start, size) }},
{%- endfor %}
};

static const program_target_t flash = {
    {{'0x%08x' % (algo.symbols['Init'] + header_size + entry)}}, // Init
    {{'0x%08x' % (algo.symbols['UnInit'] + header_size + entry)}}, // UnInit
    {{'0x%08x' % (algo.symbols['EraseChip'] + header_size + entry)}}, // EraseChip
    {{'0x%08x' % (algo.symbols['EraseSector'] + header_size + entry)}}, // EraseSector
    {{'0x%08x' % (algo.symbols['ProgramPage'] + header_size + entry)}}, // ProgramPage

    // BKPT : start of blob + 1
    // RSB  : blob start + header + rw data offset
    // RSP  : stack pointer
    {
        {{'0x%08x' % (entry + 1)}},
        {{'0x%08x' % (entry + header_size + algo.rw_start)}},
        {{'0x%08x' % stack_pointer}}
    },

    {{'0x%08x' % entry}} + 0x00000A00,  // mem buffer location
    {{'0x%08x' % entry}},               // location to write prog_blob in target RAM
    sizeof({{name}}_flash_prog_blob),   // prog_blob size
    {{name}}_flash_prog_blob,           // address of prog_blob
    {{'0x%08x' % algo.page_size}}       // ram_to_flash_bytes_to_be_written
};
